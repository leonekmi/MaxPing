import { format, startOfHour } from "date-fns";
import fr from "date-fns/locale/fr/index.js";
import { AlertWithTrains, AlertWithItinerary } from "../api/prisma.js";
import { getStationLabel } from "../api/stations.js";
import { MaxPlannerError } from "./errors.js";
import { Itinerary, Train } from "@prisma/client";

const plural = (v: number, s?: string) => (v > 1 ? s || "s" : "");

export const welcomeMessage = `üëã Salut ! Je suis MaxPing, je suis l√† pour trouver automatiquement les nouveaux trains maxables.
Commencez d√®s maintenant en utilisant /register_alert pour cr√©er votre premi√®re alerte !`;

export const alertSkeleton = (
  origin = "<i>Gare de d√©part</i>",
  destination = "<i>Gare d'arriv√©e</i>",
  date = "<i>date</i>",
  trainCount?: number
) =>
  `üöÑ ${origin} ‚û°Ô∏è ${destination}
üìÖ Jour : ${date}` +
  (typeof trainCount === "number"
    ? `\nüîé ${trainCount} train${plural(trainCount)} disponible${plural(
        trainCount
      )}`
    : "");

export const trainSkeleton = (train: Train, itinerary: Itinerary) => `üöÑ ${
  train.equipment
} ${train.number}
üïë D√©part ${format(train.departure, "HH:mm")} - Arriv√©e ${format(
  train.arrival,
  "HH:mm"
)}
üíª <a href="https://www.sncf-connect.com/app/fr-FR/redirect?redirection_type=SEARCH&origin_transporter_code=${
  itinerary.originId
}&destination_transporter_code=${itinerary.destinationId}&outward_date=${format(
  startOfHour(train.departure),
  "yyyy-MM-dd-HH-mm"
)}">R√©server le train sur SNCF Connect</a>`;

export const createAlertStep1 = `üÜï Une nouvelle alerte !
Pour commencer, pr√©cisez-moi la gare de d√©part de l'alerte.
<i>Il me faut le code r√©sarail, en 5 lettres (FRXXX)</i>

${alertSkeleton("<i><b>Gare de d√©part</b></i>")}`;

export const createAlertStep2 = (
  origin: string
) => `‚úèÔ∏è C'est not√© pour ${getStationLabel(origin)} !
O√π va-t-on ? Dites-moi !
<i>Il me faut le code r√©sarail, en 5 lettres (FRXXX)</i>

${alertSkeleton(getStationLabel(origin), "<i><b>Gare d'arriv√©e</b></i>")}`;

export const createAlertStep3 = (
  origin: string,
  destination: string
) => `üóíÔ∏è Notre itin√©raire est fait !
Quel jour voulez-vous surveiller ?

${alertSkeleton(getStationLabel(origin), getStationLabel(destination))}`;

export const cancelMessage = "üö´ La cr√©ation d'alerte a √©t√© annul√©e";

export const alertErrorMessage = (err: MaxPlannerError) =>
  `‚ö†Ô∏è Le serveur SNCF a retourn√© un r√©sultat inattendu

<pre>${err.code}:${err.message}</pre>

<i>${cancelMessage}, merci de r√©esayer ult√©rieurement, ou contactez @leonekmi pour support.</i>`;

export const noTrainsMessage = `üß≠ Il n'existe aucune connexion entre ces 2 gares √† cette date.

‚Ä¢ Seuls les Intercit√©s √Ä R√©servation Obligatoire (Intercit√©s ARO), TGV INOUI et les trains OUIGO (√† partir du 10 mai 2023) sont √©ligibles avec l'abonnement MAX JEUNE / SENIOR.
‚Ä¢ V√©rifiez sur une application de r√©servation que votre itin√©raire est possible sans correspondances, <i>MaxPing ne g√®re pas les correspondances</i>.

<i>${cancelMessage}, recommencez avec /register_alert</i>`;

export const trainsPending = "‚è≥ Je cherche les trains Max...";

export const createAlertStep4 = (
  alert: Partial<AlertWithItinerary>,
  trainCount: number
) => `‚úÖ C'est tout bon !
J'ai trouv√© ${trainCount} train${plural(
  trainCount
)}, si jamais un nouveau train appara√Æt, vous serez notifi√©.

${alertSkeleton(
  getStationLabel(alert.itinerary?.originId),
  getStationLabel(alert.itinerary?.destinationId),
  alert.date?.toLocaleDateString("fr")
)}`;

export const viewAlerts = (alerts: AlertWithTrains[]) => `üìë Voici vos alertes

${
  alerts.length > 0
    ? alerts
        .map(
          (alert, index) =>
            `üîî Alerte n¬∞${index + 1}
${alertSkeleton(
  getStationLabel(alert.itinerary?.originId),
  getStationLabel(alert.itinerary?.destinationId),
  alert.date.toLocaleDateString("fr"),
  alert.itinerary.trains.length
)}`
        )
        .join("\n\n")
    : "Aucune alerte enregistr√©e ! Commencez avec /register_alert"
}`;

// At least one train
export const trainAlert = (
  trains: [Train, ...Train[]],
  alert: AlertWithItinerary
) =>
  `‚ùó ${trains.length} nouveau${plural(trains.length, "x")} train${plural(
    trains.length
  )} <b>${getStationLabel(alert.itinerary.originId)} ‚û°Ô∏è ${getStationLabel(
    alert.itinerary.destinationId
  )}</b> pour le <b>${format(alert.date, "d MMMM", { locale: fr })}</b> !

${trains.map((train) => trainSkeleton(train, alert.itinerary)).join("\n\n")}`;

export const showAlert = (
  alert: AlertWithTrains,
  index = 1
) => `üîî Alerte n¬∞${index}
${alertSkeleton(
  getStationLabel(alert.itinerary.originId),
  getStationLabel(alert.itinerary.destinationId),
  alert.date.toLocaleDateString("fr"),
  alert.itinerary.trains.length
)}

${alert.itinerary.trains
  .map((train) => trainSkeleton(train, alert.itinerary))
  .join("\n\n")}`;

export const deletionAlert = (
  alert: AlertWithItinerary
) => `üß≠ Une alerte a √©t√© supprim√©e, car elle ne comprend aucun itin√©raire possible.

${alertSkeleton(
  getStationLabel(alert.itinerary.originId),
  getStationLabel(alert.itinerary.destinationId),
  alert.date.toLocaleDateString("fr"),
  0
)}

‚Ä¢ Seuls les Intercit√©s √Ä R√©servation Obligatoire (Intercit√©s ARO), TGV INOUI et les trains OUIGO (√† partir du 10 mai 2023) sont √©ligibles avec l'abonnement MAX JEUNE / SENIOR.
‚Ä¢ V√©rifiez sur une application de r√©servation que votre itin√©raire est possible sans correspondances, <i>MaxPing ne g√®re pas les correspondances</i>.

<i>MaxPing est d√©sormais capable de d√©tecter un itin√©raire qui ne comprend aucun train √©ligible et pr√©venir l'utilisateur si tel est le cas. Si vous pensez que cette d√©tection est erron√©e, merci de contacter @leonekmi avec une copie de ce message.</i>`;
